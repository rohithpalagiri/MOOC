{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rohit\\\\Documents\\\\Projects\\\\MOOC\\\\part1\\\\unicafe\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = props => {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    onClick: props.handlClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, props.text);\n};\n\nconst Display = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, props.response, \": \", props.count);\n};\n\nconst Total = ({\n  group\n}) => {\n  console.log(group);\n\n  const addUp = () => {\n    return group.reduce((a, b) => a + b);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, \"all: \", addUp());\n};\n\nconst Average = ({\n  good,\n  bad,\n  neutral\n}) => {\n  const calcAverage = () => {\n    return (good - bad) / (good + bad + neutral);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, \"average: \", calcAverage(), \" \");\n};\n\nconst Positive = ({\n  good,\n  bad,\n  neutral\n}) => {\n  const calcPositive = () => {\n    return good / (good + bad + neutral);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, \"average: \", calcPositive(), \" \");\n};\n\nconst Statistics = ({\n  good,\n  bad,\n  neutral\n}) => {\n  const addUp = () => {\n    return good + bad + neutral;\n  };\n\n  const calcAverage = () => {\n    return (good - bad) / (good + bad + neutral);\n  };\n\n  const calcPositive = () => {\n    return good / (good + bad + neutral);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"Statistic\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"all: \", addUp()), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, \"average: \", calcAverage(), \" \"));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const clickGood = () => {\n    setGood(good + 1);\n  };\n\n  const clickNeutral = () => {\n    setNeutral(neutral + 1);\n  };\n\n  const clickBad = () => {\n    setBad(bad + 1);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, \"give feeedback\"), /*#__PURE__*/React.createElement(Button, {\n    handlClick: clickGood,\n    text: \"good\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    handlClick: clickNeutral,\n    text: \"neutral\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    handlClick: clickBad,\n    text: \"bad\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, \"Statistics\"), /*#__PURE__*/React.createElement(Display, {\n    response: \"good\",\n    count: good,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Display, {\n    response: \"neutral\",\n    count: neutral,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Display, {\n    response: \"bad\",\n    count: bad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Total, {\n    group: [good, neutral, bad],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Average, {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Positive, {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/rohit/Documents/Projects/MOOC/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Button","props","handlClick","text","Display","response","count","Total","group","console","log","addUp","reduce","a","b","Average","good","bad","neutral","calcAverage","Positive","calcPositive","Statistics","App","setGood","setNeutral","setBad","clickGood","clickNeutral","clickBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom'\n\nconst Button = (props) => {\n  return(\n    <button onClick={props.handlClick}>{props.text}</button>\n  )\n}\n\nconst Display = (props) => {\n  return(\n    <div>{props.response}: {props.count}</div>\n  )\n}\n\nconst Total = ({group}) => {\n  console.log(group)\n  const addUp = () =>{\n    return group.reduce((a,b) => a+b)\n  }\n  return(\n    <div>all: {addUp()}</div>\n  )\n}\n\nconst Average = ({good, bad, neutral}) => {\n  const calcAverage = () =>{\n    return ((good-bad) / (good+bad+neutral))\n  }\n  return(\n    <div>average: {calcAverage()} </div>\n  )\n}\n\nconst Positive = ({good, bad, neutral}) => {\n  const calcPositive = () =>{\n    return ((good) / (good+bad+neutral))\n  }\n  return(\n    <div>average: {calcPositive()} </div>\n  )\n}\n\nconst Statistics = ({good, bad, neutral}) => {\n  const addUp = () =>{\n    return good + bad + neutral;\n  }\n  const calcAverage = () =>{\n    return ((good-bad) / (good+bad+neutral))\n  }\n  const calcPositive = () =>{\n    return ((good) / (good+bad+neutral))\n  }\n\n  return(\n    <div>\n      <h1>Statistic</h1>\n      <div>all: {addUp()}</div>\n      <div>average: {calcAverage()} </div>\n      \n    </div>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const clickGood = () =>{\n    setGood( good + 1)\n  }\n\n  const clickNeutral = () =>{\n    setNeutral( neutral + 1)\n  }\n\n  const clickBad = () =>{\n    setBad( bad + 1)\n  }\n\n  return (\n    <div>\n      <h1>give feeedback</h1>\n      <Button handlClick={clickGood} text=\"good\" />\n      <Button handlClick={clickNeutral} text=\"neutral\" />\n      <Button handlClick={clickBad} text=\"bad\" />\n\n      <h1>Statistics</h1>\n      <Display response=\"good\" count={good} />\n      <Display response=\"neutral\" count={neutral} />\n      <Display response=\"bad\" count={bad} />\n      <Total group={[good, neutral, bad]} />\n      <Average good={good} neutral={neutral} bad={bad} />\n      <Positive good={good} neutral={neutral} bad={bad} />\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)"]},"metadata":{},"sourceType":"module"}